
'use server';
/**
 * @fileOverview A flashcard generation AI agent that creates flashcards.
 * NOTE: This flow has been updated to ONLY generate text. Audio is now handled client-side.
 *
 * - generateAudioFlashcards - A function that handles the text-based flashcard generation process.
 * - GenerateAudioFlashcardsInput - The input type for this function.
 * - GenerateAudioFlashcardsOutput - The return type for this function.
 */

import { aiForQuizzes } from '@/ai/genkit';
import { z } from 'zod';

import { generateFlashcards, type GenerateFlashcardsInput } from './generate-flashcards';
import type { Flashcard } from '@/lib/types';

const GenerateAudioFlashcardsInputSchema = z.object({
  topic: z.string().describe('The academic topic for which to generate flashcards.'),
  numFlashcards: z.number().min(5).max(15).describe('The number of flashcards to generate (5-15).'),
});
export type GenerateAudioFlashcardsInput = z.infer<typeof GenerateAudioFlashcardsInputSchema>;

// The output schema now makes audioDataUri optional, as it will no longer be generated by the server.
const GenerateAudioFlashcardsOutputSchema = z.object({
  flashcards: z.array(
    z.object({
      term: z.string(),
      definition: z.string(),
    })
  ).describe('An array of generated text-based flashcards.'),
  audioDataUri: z.string().optional().describe('DEPRECATED: This will no longer be populated. Audio is handled client-side.'),
});
export type GenerateAudioFlashcardsOutput = z.infer<typeof GenerateAudioFlashcardsOutputSchema>;

// This function is exported and called from a server action.
export async function generateAudioFlashcards(input: GenerateAudioFlashcardsInput): Promise<GenerateAudioFlashcardsOutput> {
  return generateAudioFlashcardsFlow(input);
}

// The main Genkit flow definition.
const generateAudioFlashcardsFlow = aiForQuizzes.defineFlow(
  {
    name: 'generateAudioFlashcardsFlow',
    inputSchema: GenerateAudioFlashcardsInputSchema,
    outputSchema: GenerateAudioFlashcardsOutputSchema,
  },
  async (input) => {
    // Step 1: Generate the text content for the flashcards.
    // This reuses the existing, robust flashcard generation flow.
    const textFlashcardsInput: GenerateFlashcardsInput = {
      topic: input.topic,
      numFlashcards: input.numFlashcards,
    };
    const textFlashcardsResult = await generateFlashcards(textFlashcardsInput);

    if (!textFlashcardsResult.flashcards || textFlashcardsResult.flashcards.length === 0) {
      throw new Error("Failed to generate the text for the flashcards.");
    }
    
    console.log(`[AI Flow - Audio Flashcards] Successfully generated ${textFlashcardsResult.flashcards.length} text-only flashcards.`);

    // Step 2: Return the text flashcards. The audioDataUri is intentionally left undefined.
    return {
      flashcards: textFlashcardsResult.flashcards,
      audioDataUri: undefined, 
    };
  }
);
